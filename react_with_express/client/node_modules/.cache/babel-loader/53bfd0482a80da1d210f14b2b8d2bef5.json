{"ast":null,"code":"/**\n * Fuse.js v6.0.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2020 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\nfunction isArray(value) {\n  return !Array.isArray ? Object.prototype.toString.call(value) === '[object Array]' : Array.isArray(value);\n} // Adapted from:\n// https://github.com/lodash/lodash/blob/f4ca396a796435422bd4fd41fadbd225edddf175/.internal/baseToString.js\n\n\nconst INFINITY = 1 / 0;\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nfunction isObject(value) {\n  return typeof value === 'object';\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isBlank(value) {\n  return !value.trim().length;\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = key => `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = max => `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = name => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = key => `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = {};\n    this._keyNames = [];\n    let totalWeight = 0;\n    keys.forEach(key => {\n      let keyName;\n      let weight = 1;\n\n      if (isString(key)) {\n        keyName = key;\n      } else {\n        if (!hasOwn.call(key, 'name')) {\n          throw new Error(MISSING_KEY_PROPERTY('name'));\n        }\n\n        keyName = key.name;\n\n        if (hasOwn.call(key, 'weight')) {\n          weight = key.weight;\n\n          if (weight <= 0) {\n            throw new Error(INVALID_KEY_WEIGHT_VALUE(keyName));\n          }\n        }\n      }\n\n      this._keyNames.push(keyName);\n\n      this._keys[keyName] = {\n        weight\n      };\n      totalWeight += weight;\n    }); // Normalize weights so that their sum is equal to 1\n\n    this._keyNames.forEach(key => {\n      this._keys[key].weight /= totalWeight;\n    });\n  }\n\n  get(key, name) {\n    return this._keys[key] && this._keys[key][name];\n  }\n\n  keys() {\n    return this._keyNames;\n  }\n\n  toJSON() {\n    return JSON.stringify(this._keys);\n  }\n\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path) => {\n    if (!path) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      const dotIndex = path.indexOf('.');\n      let key = path;\n      let remaining = null;\n\n      if (dotIndex !== -1) {\n        key = path.slice(0, dotIndex);\n        remaining = path.slice(dotIndex + 1);\n      }\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return;\n      }\n\n      if (!remaining && (isString(value) || isNumber(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true; // Search each item in the array.\n\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], remaining);\n        }\n      } else if (remaining) {\n        // An object. Recurse further.\n        deepGet(value, remaining);\n      }\n    }\n  };\n\n  deepGet(obj, path);\n  return arr ? list : list[0];\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When true, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\nconst BasicOptions = {\n  // When true, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1\n};\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\nconst AdvancedOptions = {\n  // When true, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get\n};\nvar Config = { ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\nconst SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\n\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens);\n      }\n\n      const n = parseFloat((1 / Math.sqrt(numTokens)).toFixed(mantissa));\n      cache.set(numTokens, n);\n      return n;\n    },\n\n    clear() {\n      cache.clear();\n    }\n\n  };\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn\n  } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n    this.setRecords();\n  }\n\n  setCollection(docs = []) {\n    this.docs = docs;\n  }\n\n  setRecords(records = []) {\n    this.records = records;\n  }\n\n  setKeys(keys = []) {\n    this.keys = keys;\n  }\n\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return;\n    }\n\n    this.isCreated = true; // List is Array<String>\n\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  } // Adds a doc to the end of the index\n\n\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  } // Removes the doc at the specified index of the index\n\n\n  removeAt(idx) {\n    this.records.splice(idx, 1); // Change ref index of every subsquent doc\n\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n\n  size() {\n    return this.records.length;\n  }\n\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return;\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n    this.records.push(record);\n  }\n\n  _addObject(doc, docIndex) {\n    let record = {\n      i: docIndex,\n      $: {}\n    }; // Iterate over every key (i.e, path), and fetch the value at that key\n\n    this.keys.forEach((key, keyIndex) => {\n      let value = this.getFn(doc, key);\n\n      if (!isDefined(value)) {\n        return;\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{\n          nestedArrIndex: -1,\n          value\n        }];\n\n        while (stack.length) {\n          const {\n            nestedArrIndex,\n            value\n          } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue;\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n        record.$[keyIndex] = subRecord;\n      }\n    });\n    this.records.push(record);\n  }\n\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    };\n  }\n\n}\n\nfunction createIndex(keys, docs, {\n  getFn = Config.getFn\n} = {}) {\n  let myIndex = new FuseIndex({\n    getFn\n  });\n  myIndex.setKeys(keys);\n  myIndex.setCollection(docs);\n  myIndex.create();\n  return myIndex;\n}\n\nfunction parseIndex(data, {\n  getFn = Config.getFn\n} = {}) {\n  const {\n    keys,\n    records\n  } = data;\n  let myIndex = new FuseIndex({\n    getFn\n  });\n  myIndex.setKeys(keys);\n  myIndex.setRecords(records);\n  return myIndex;\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return;\n  }\n\n  matches.forEach(match => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return;\n    }\n\n    const {\n      indices,\n      value\n    } = match;\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction computeScore(pattern, {\n  errors = 0,\n  currentLocation = 0,\n  expectedLocation = 0,\n  distance = Config.distance\n} = {}) {\n  const accuracy = errors / pattern.length;\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n}\n\nfunction convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n\n      start = -1;\n    }\n  } // (i-1 - start) + 1 => i - start\n\n\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices;\n} // Machine word size\n\n\nconst MAX_BITS = 32;\n\nfunction search(text, pattern, patternAlphabet, {\n  location = Config.location,\n  distance = Config.distance,\n  threshold = Config.threshold,\n  findAllMatches = Config.findAllMatches,\n  minMatchCharLength = Config.minMatchCharLength,\n  includeMatches = Config.includeMatches\n} = {}) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));\n  }\n\n  const patternLen = pattern.length; // Set starting location at beginning text and initialize the alphabet.\n\n  const textLen = text.length; // Handle the case when location > text.length\n\n  const expectedLocation = Math.max(0, Math.min(location, textLen)); // Highest score beyond which we give up.\n\n  let currentThreshold = threshold; // Is there a nearby exact match? (speedup)\n\n  let bestLocation = expectedLocation; // A mask of the matches, used for building the indices\n\n  const matchMask = [];\n\n  if (includeMatches) {\n    for (let i = 0; i < textLen; i += 1) {\n      matchMask[i] = 0;\n    }\n  }\n\n  let index; // Get all exact matches, here for speed up\n\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (includeMatches) {\n      let i = 0;\n\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  } // Reset the best location\n\n\n  bestLocation = -1;\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n  const mask = 1 << (patternLen <= MAX_BITS - 1 ? patternLen - 1 : MAX_BITS - 2);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    binMax = binMid;\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen; // Initialize the bit array\n\n    let bitArr = Array(finish + 2);\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (charMatch && includeMatches) {\n        matchMask[currentLocation] = 1;\n      } // First pass: exact match\n\n\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch; // Subsequent passes: fuzzy match\n\n      if (i !== 0) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance\n        }); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation; // Already passed `loc`, downhill from here on in.\n\n          if (bestLocation <= expectedLocation) {\n            break;\n          } // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n\n\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance\n    });\n\n    if (score > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  let result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (includeMatches) {\n    result.indices = convertMaskToIndices(matchMask, minMatchCharLength);\n  }\n\n  return result;\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n  let len = pattern.length;\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] = 0;\n  }\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] |= 1 << len - i - 1;\n  }\n\n  return mask;\n}\n\nclass BitapSearch {\n  constructor(pattern, {\n    location = Config.location,\n    threshold = Config.threshold,\n    distance = Config.distance,\n    includeMatches = Config.includeMatches,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    isCaseSensitive = Config.isCaseSensitive\n  } = {}) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.chunks = [];\n    let index = 0;\n\n    while (index < this.pattern.length) {\n      let pattern = this.pattern.substring(index, index + MAX_BITS);\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern)\n      });\n      index += MAX_BITS;\n    }\n  }\n\n  searchIn(text) {\n    const {\n      isCaseSensitive,\n      includeMatches\n    } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    } // Exact match\n\n\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result;\n    } // Otherwise, use Bitap algorithm\n\n\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength\n    } = this.options;\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n    this.chunks.forEach(({\n      pattern,\n      alphabet\n    }, i) => {\n      const {\n        isMatch,\n        score,\n        indices\n      } = search(text, pattern, alphabet, {\n        location: location + MAX_BITS * i,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result;\n  }\n\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex);\n  }\n\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex);\n  }\n\n  search()\n  /*text*/\n  {}\n\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null;\n} // Token: 'file\n\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'exact';\n  }\n\n  static get multiRegex() {\n    return /^'\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^'(.*)$/;\n  }\n\n  search(text) {\n    let location = 0;\n    let index;\n    const indices = [];\n    const patternLen = this.pattern.length; // Get all exact matches\n\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n    return {\n      isMatch,\n      score: isMatch ? 1 : 0,\n      indices\n    };\n  }\n\n} // Token: !fire\n\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)$/;\n  }\n\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: ^file\n\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    };\n  }\n\n} // Token: !^fire\n\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: .file$\n\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    };\n  }\n\n} // Token: !.file$\n\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(pattern, {\n    location = Config.location,\n    threshold = Config.threshold,\n    distance = Config.distance,\n    includeMatches = Config.includeMatches,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    isCaseSensitive = Config.isCaseSensitive\n  } = {}) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive\n    });\n  }\n\n  static get type() {\n    return 'fuzzy';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)$/;\n  }\n\n  search(text) {\n    return this._bitapSearch.searchIn(text);\n  }\n\n} // ❗Order is important. DO NOT CHANGE.\n\n\nconst searchers = [ExactMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];\nconst searchersLen = searchers.length; // Regex to split by spaces, but keep anything in quotes together\n\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|'; // Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\n\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map(item => {\n    let query = item.trim().split(SPACE_RE).filter(item => item && !!item.trim());\n    let results = [];\n\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i]; // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n\n      let found = false;\n      let idx = -1;\n\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue;\n      } // 2. Handle single query matches (i.e, once that are *not* quoted)\n\n\n      idx = -1;\n\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          break;\n        }\n      }\n    }\n\n    return results;\n  });\n} // These extended matchers can return an array of matches, as opposed\n// to a singl match\n\n\nconst MultiMatchSet = new Set([FuzzyMatch.type, ExactMatch.type]);\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that match `jscript`             |\n * | `'python`   | exact-match                | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\n\nclass ExtendedSearch {\n  constructor(pattern, {\n    isCaseSensitive = Config.isCaseSensitive,\n    includeMatches = Config.includeMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    findAllMatches = Config.findAllMatches,\n    location = Config.location,\n    threshold = Config.threshold,\n    distance = Config.distance\n  } = {}) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      location,\n      threshold,\n      distance\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch;\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      };\n    }\n\n    const {\n      includeMatches,\n      isCaseSensitive\n    } = this.options;\n    text = isCaseSensitive ? text : text.toLowerCase();\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0; // ORs\n\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i]; // Reset indices\n\n      allIndices.length = 0;\n      numMatches = 0; // ANDs\n\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const {\n          isMatch,\n          indices,\n          score\n        } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break;\n        }\n      } // OR condition, so if TRUE, return\n\n\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result;\n      }\n    } // Nothing was matched\n\n\n    return {\n      isMatch: false,\n      score: 1\n    };\n  }\n\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options);\n    }\n  }\n\n  return new BitapSearch(pattern, options);\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst isExpression = query => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isLeaf = query => !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = query => ({\n  [LogicalOperator.AND]: Object.keys(query).map(key => ({\n    [key]: query[key]\n  }))\n}); // When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\n\n\nfunction parse(query, options, {\n  auto = true\n} = {}) {\n  const next = query => {\n    let keys = Object.keys(query);\n\n    if (keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query));\n    }\n\n    let key = keys[0];\n\n    if (isLeaf(query)) {\n      const pattern = query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));\n      }\n\n      const obj = {\n        key,\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj;\n    }\n\n    let node = {\n      children: [],\n      operator: key\n    };\n    keys.forEach(key => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach(item => {\n          node.children.push(next(item));\n        });\n      }\n    });\n    return node;\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query);\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config,\n      ...options\n    };\n\n    if (this.options.useExtendedSearch && !true) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE);\n    }\n\n    this._myIndex = index || createIndex(this._keyStore.keys(), this._docs, {\n      getFn: this.options.getFn\n    });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return;\n    }\n\n    this._docs.push(doc);\n\n    this._myIndex.add(doc);\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex;\n  }\n\n  search(query, {\n    limit = -1\n  } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn\n    } = this.options;\n    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);\n    computeScore$1(results, this._keyStore);\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    });\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      records\n    } = this._myIndex;\n    const results = []; // Iterate over every string in the index\n\n    records.forEach(({\n      v: text,\n      i: idx,\n      n: norm\n    }) => {\n      if (!isDefined(text)) {\n        return;\n      }\n\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{\n            score,\n            value: text,\n            norm,\n            indices\n          }]\n        });\n      }\n    });\n    return results;\n  }\n\n  _searchLogical(query) {\n    const expression = parse(query, this.options);\n    const {\n      keys,\n      records\n    } = this._myIndex;\n    const resultMap = {};\n    const results = [];\n\n    const evaluateExpression = (node, item, idx) => {\n      if (node.children) {\n        const operator = node.operator;\n        let res = [];\n\n        for (let k = 0; k < node.children.length; k += 1) {\n          let child = node.children[k];\n          let matches = evaluateExpression(child, item, idx);\n\n          if (matches && matches.length) {\n            res.push({\n              idx,\n              item,\n              matches\n            });\n\n            if (operator === LogicalOperator.OR) {\n              // Short-circuit\n              break;\n            }\n          } else if (operator === LogicalOperator.AND) {\n            res.length = 0; // Short-circuit\n\n            break;\n          }\n        }\n\n        if (res.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = {\n              idx,\n              item,\n              matches: []\n            };\n            results.push(resultMap[idx]);\n          }\n\n          res.forEach(({\n            matches\n          }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      } else {\n        const {\n          key,\n          searcher\n        } = node;\n        const value = item[keys.indexOf(key)];\n        return this._findMatches({\n          key,\n          value,\n          searcher\n        });\n      }\n    };\n\n    records.forEach(({\n      $: item,\n      i: idx\n    }) => {\n      if (isDefined(item)) {\n        evaluateExpression(expression, item, idx);\n      }\n    });\n    return results;\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      keys,\n      records\n    } = this._myIndex;\n    const results = []; // List is Array<Object>\n\n    records.forEach(({\n      $: item,\n      i: idx\n    }) => {\n      if (!isDefined(item)) {\n        return;\n      }\n\n      let matches = []; // Iterate over every key (i.e, path), and fetch the value at that key\n\n      keys.forEach((key, keyIndex) => {\n        matches.push(...this._findMatches({\n          key,\n          value: item[keyIndex],\n          searcher\n        }));\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n    return results;\n  }\n\n  _findMatches({\n    key,\n    value,\n    searcher\n  }) {\n    if (!isDefined(value)) {\n      return [];\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({\n        v: text,\n        i: idx,\n        n: norm\n      }) => {\n        if (!isDefined(text)) {\n          return;\n        }\n\n        const {\n          isMatch,\n          score,\n          indices\n        } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const {\n        v: text,\n        n: norm\n      } = value;\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({\n          score,\n          key,\n          value: text,\n          norm,\n          indices\n        });\n      }\n    }\n\n    return matches;\n  }\n\n} // Practical scoring function\n\n\nfunction computeScore$1(results, keyStore) {\n  results.forEach(result => {\n    let totalScore = 1;\n    result.matches.forEach(({\n      key,\n      norm,\n      score\n    }) => {\n      const weight = keyStore.get(key, 'weight');\n      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * norm);\n    });\n    result.score = totalScore;\n  });\n}\n\nfunction format(results, docs, {\n  includeMatches = Config.includeMatches,\n  includeScore = Config.includeScore\n} = {}) {\n  const transformers = [];\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n  return results.map(result => {\n    const {\n      idx\n    } = result;\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach(transformer => {\n        transformer(result, data);\n      });\n    }\n\n    return data;\n  });\n}\n\nFuse.version = '6.0.0';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n{\n  Fuse.parseQuery = parse;\n}\n{\n  register(ExtendedSearch);\n}\nexport default Fuse;","map":{"version":3,"sources":["/Users/codyum/Desktop/Github/tier-creator/tier-creator/react_with_express/node_modules/fuse.js/dist/fuse.esm.js"],"names":["isArray","value","Array","Object","prototype","toString","call","INFINITY","baseToString","result","isString","isNumber","isObject","isDefined","undefined","isBlank","trim","length","EXTENDED_SEARCH_UNAVAILABLE","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","hasOwn","hasOwnProperty","KeyStore","constructor","keys","_keys","_keyNames","totalWeight","forEach","keyName","weight","Error","push","get","toJSON","JSON","stringify","obj","path","list","arr","deepGet","dotIndex","indexOf","remaining","slice","i","len","MatchOptions","includeMatches","findAllMatches","minMatchCharLength","BasicOptions","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","FuzzyOptions","location","threshold","distance","AdvancedOptions","useExtendedSearch","getFn","Config","SPACE","norm","mantissa","cache","Map","numTokens","match","has","n","parseFloat","Math","sqrt","toFixed","set","clear","FuseIndex","isCreated","setRecords","setCollection","docs","records","setKeys","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","item","k","createIndex","myIndex","parseIndex","data","transformMatches","matches","indices","refIndex","transformScore","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","start","end","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","matchMask","index","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","j","charMatch","charAt","isMatch","createPatternAlphabet","BitapSearch","options","toLowerCase","chunks","substring","alphabet","searchIn","allIndices","totalScore","hasMatches","BaseMatch","isMultiMatch","getMatch","multiRegex","isSingleMatch","singleRegex","exp","ExactMatch","type","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","split","map","query","filter","results","queryItem","found","searcher","token","MultiMatchSet","Set","ExtendedSearch","condition","_","numMatches","qLen","pLen","registeredSearchers","register","args","createSearcher","searcherClass","LogicalOperator","AND","OR","isExpression","isLeaf","convertToExplicit","parse","auto","next","node","children","operator","Fuse","_keyStore","_docs","_myIndex","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","computeScore$1","sort","format","expression","resultMap","evaluateExpression","res","child","_findMatches","keyStore","pow","Number","EPSILON","transformers","transformer","version","config"],"mappings":"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","sourcesContent":["/**\n * Fuse.js v6.0.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2020 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? Object.prototype.toString.call(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from:\n// https://github.com/lodash/lodash/blob/f4ca396a796435422bd4fd41fadbd225edddf175/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = {};\n    this._keyNames = [];\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let keyName;\n      let weight = 1;\n\n      if (isString(key)) {\n        keyName = key;\n      } else {\n        if (!hasOwn.call(key, 'name')) {\n          throw new Error(MISSING_KEY_PROPERTY('name'))\n        }\n        keyName = key.name;\n\n        if (hasOwn.call(key, 'weight')) {\n          weight = key.weight;\n\n          if (weight <= 0) {\n            throw new Error(INVALID_KEY_WEIGHT_VALUE(keyName))\n          }\n        }\n      }\n\n      this._keyNames.push(keyName);\n\n      this._keys[keyName] = { weight };\n\n      totalWeight += weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keyNames.forEach((key) => {\n      this._keys[key].weight /= totalWeight;\n    });\n  }\n  get(key, name) {\n    return this._keys[key] && this._keys[key][name]\n  }\n  keys() {\n    return this._keyNames\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path) => {\n    if (!path) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      const dotIndex = path.indexOf('.');\n\n      let key = path;\n      let remaining = null;\n\n      if (dotIndex !== -1) {\n        key = path.slice(0, dotIndex);\n        remaining = path.slice(dotIndex + 1);\n      }\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (!remaining && (isString(value) || isNumber(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], remaining);\n        }\n      } else if (remaining) {\n        // An object. Recurse further.\n        deepGet(value, remaining);\n      }\n    }\n  };\n\n  deepGet(obj, path);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When true, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When true, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When true, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const n = parseFloat((1 / Math.sqrt(numTokens)).toFixed(mantissa));\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setRecords();\n  }\n  setCollection(docs = []) {\n    this.docs = docs;\n  }\n  setRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      let value = this.getFn(doc, key);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  let myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setCollection(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  let myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setRecords(records);\n  return myIndex\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // A mask of the matches, used for building the indices\n  const matchMask = [];\n\n  if (includeMatches) {\n    for (let i = 0; i < textLen; i += 1) {\n      matchMask[i] = 0;\n    }\n  }\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (includeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen <= MAX_BITS - 1 ? patternLen - 1 : MAX_BITS - 2);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (charMatch && includeMatches) {\n        matchMask[currentLocation] = 1;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i !== 0) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  let result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (includeMatches) {\n    result.indices = convertMaskToIndices(matchMask, minMatchCharLength);\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n  let len = pattern.length;\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] = 0;\n  }\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] |= 1 << (len - i - 1);\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    let index = 0;\n    while (index < this.pattern.length) {\n      let pattern = this.pattern.substring(index, index + MAX_BITS);\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern)\n      });\n      index += MAX_BITS;\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet }, i) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + MAX_BITS * i,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 1 : 0,\n      indices\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, ExactMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that match `jscript`             |\n * | `'python`   | exact-match                | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    if (keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    let key = keys[0];\n\n    if (isLeaf(query)) {\n      const pattern = query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        key,\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: key\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this._keyStore.keys(), this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const { includeMatches, includeScore, shouldSort, sortFn } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, this._keyStore);\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n    const { keys, records } = this._myIndex;\n    const resultMap = {};\n    const results = [];\n\n    const evaluateExpression = (node, item, idx) => {\n      if (node.children) {\n        const operator = node.operator;\n        let res = [];\n\n        for (let k = 0; k < node.children.length; k += 1) {\n          let child = node.children[k];\n          let matches = evaluateExpression(child, item, idx);\n\n          if (matches && matches.length) {\n            res.push({\n              idx,\n              item,\n              matches\n            });\n            if (operator === LogicalOperator.OR) {\n              // Short-circuit\n              break\n            }\n          } else if (operator === LogicalOperator.AND) {\n            res.length = 0;\n            // Short-circuit\n            break\n          }\n        }\n\n        if (res.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          res.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      } else {\n        const { key, searcher } = node;\n        const value = item[keys.indexOf(key)];\n\n        return this._findMatches({\n          key,\n          value,\n          searcher\n        })\n      }\n    };\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        evaluateExpression(expression, item, idx);\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\n// Practical scoring function\nfunction computeScore$1(results, keyStore) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = keyStore.get(key, 'weight');\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * norm\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nFuse.version = '6.0.0';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n"]},"metadata":{},"sourceType":"module"}